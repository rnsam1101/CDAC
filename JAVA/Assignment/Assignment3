1. Loan Amortization Calculator
Implement a system to calculate and display the monthly payments for a mortgage loan. The system should:
1.	Accept the principal amount (loan amount), annual interest rate, and loan term (in years) from the user.
2.	Calculate the monthly payment using the standard mortgage formula:
o	Monthly Payment Calculation:
	monthlyPayment = principal * (monthlyInterestRate * (1 + monthlyInterestRate)^(numberOfMonths)) / ((1 + monthlyInterestRate)^(numberOfMonths) - 1)
	Where monthlyInterestRate = annualInterestRate / 12 / 100 and numberOfMonths = loanTerm * 12
	Note: Here ^ means power and to find it you can use Math.pow( ) method
3.	Display the monthly payment and the total amount paid over the life of the loan, in Indian Rupees (₹).
Define class LoanAmortizationCalculator with methods acceptRecord, calculateMonthlyPayment & printRecord and test the functionality in main method.


package org.example1;

import java.util.Scanner;

class LoanDetails {
	private double principal;
	private double AnnualinterestRate;
	private double loanterm;
	private double  monthlypayment;
	
	public double CalMonthlyPayment(){
		
		return principal * (monthlyInterestAmt() * Math.pow(1 + monthlyInterestAmt(), NumofMonths()) / (Math.pow(1 + monthlyInterestAmt(), NumofMonths()) - 1));

	}	

	public double  monthlyInterestAmt() {
		return AnnualinterestRate/12/100; 
	}
	public double NumofMonths() {
		return loanterm * 12;
	}
	
	public LoanDetails() {
		this.principal = 0 ;
		this.AnnualinterestRate = 0;
		this.loanterm = 0;
		this.monthlypayment = 0;
	}
	public void AcceptRecords( ) {
		Scanner sc =new Scanner(System.in);
		 System.out.println("Principle: ");
		 this.principal = sc.nextDouble();
		 System.out.println("AnnualinterestRate: ");
		 this.AnnualinterestRate = sc.nextDouble();
		
		 System.out.println("loanterm: ");
		 this.loanterm = sc.nextDouble();
		 
		 
	}
	public void Showrecords() {
		this.monthlypayment = CalMonthlyPayment();
		this.AnnualinterestRate = monthlyInterestAmt();
			
		System.out.println("Principle Amount: "+principal);
		System.out.println("Annual Interest Rate: "+AnnualinterestRate);
		System.out.println("Loan term: "+loanterm);
		System.out.println("Payment : " + monthlypayment);
			}
}

public  class LoanCalculator {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LoanDetails cal = new LoanDetails();
		cal.AcceptRecords();
		cal.Showrecords();	
		}
}
 






2. Compound Interest Calculator for Investment
Develop a system to compute the future value of an investment with compound interest. The system should:
1.	Accept the initial investment amount, annual interest rate, number of times the interest is compounded per year, and investment duration (in years) from the user.
2.	Calculate the future value of the investment using the formula:
o	Future Value Calculation:
	futureValue = principal * (1 + annualInterestRate / numberOfCompounds)^(numberOfCompounds * years)
o	Total Interest Earned: totalInterest = futureValue - principal
3.	Display the future value and the total interest earned, in Indian Rupees (₹).
Define class CompoundInterestCalculator with methods acceptRecord , calculateFutureValue, printRecord and test the functionality in main method.
package org.example3;

import java.text.NumberFormat;
import java.util.Locale;
import java.util.Scanner;

class compoundInterestCal{
	    private double principal;
	    private double annualInterestRate;
	    private int numberOfCompounds;
	    private int years;
	    private double futureValue;
	    private double totalInterest;
	    
	    public void acceptRecord() {
	        Scanner sc = new Scanner(System.in);
	        System.out.print("Enter Initial Investment Amount: ");
	        this.principal = sc.nextDouble();

	        System.out.print("Enter Annual Interest Rate (in %): ");
	        this.annualInterestRate = sc.nextDouble();

	        System.out.print("Enter Number of Times Interest is Compounded Per Year: ");
	        this.numberOfCompounds = sc.nextInt();

	        System.out.print("Enter Investment Duration (in years): ");
	        this.years = sc.nextInt();
	    }
	    public void printRecord() {
	    	this.futureValue = FutureValueCal();
	    	this.totalInterest = TotalIntCal();
	    	System.out.println("Initial Investment : " + principal);
	        System.out.println("Annual Interest Rate: " + annualInterestRate);
	        System.out.println("Future Value: " +futureValue );
	        System.out.println("Total Interest Earned: " + totalInterest);
	    }
	    public double FutureValueCal() {
	        this.futureValue = principal * Math.pow(1 + (annualInterestRate / numberOfCompounds / 100), numberOfCompounds * years);
	        return futureValue;
	    }
	    public double TotalIntCal() {
	        this.totalInterest = futureValue - principal;
	        return totalInterest;
	    }
}
public class compound {
	public static void main(String[] args) {
		compoundInterestCal ci = new compoundInterestCal();
		ci.acceptRecord();
		ci.printRecord();
		
	}

}


 





3. BMI (Body Mass Index) Tracker
Create a system to calculate and classify Body Mass Index (BMI). The system should:
1.	Accept weight (in kilograms) and height (in meters) from the user.
2.	Calculate the BMI using the formula:
o	BMI Calculation: BMI = weight / (height * height)
3.	Classify the BMI into one of the following categories:
o	Underweight: BMI < 18.5
o	Normal weight: 18.5 ≤ BMI < 24.9
o	Overweight: 25 ≤ BMI < 29.9
o	Obese: BMI ≥ 30
4.	Display the BMI value and its classification.
Define class BMITracker with methods acceptRecord, calculateBMI, classifyBMI & printRecord and test the functionality in main method.

package org.example4;
import java.util.Scanner;

class CheckBMI {
    private double weight;
    private double height;
    private double bmi;

    public void acceptRecord() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Weight (in kg): ");
        this.weight = sc.nextDouble();

        System.out.print("Enter Height (in meters): ");
        this.height = sc.nextDouble();
    }


    public void calculateBMI() {
        this.bmi = weight / (height * height);
    }

    public void classifyBMI() {
        System.out.printf("\nYour BMI is: %.2f\n", bmi);
if(bmi<18.5) {
			System.out.println(" You are Underweight.");
		}
		else if(bmi>=18.5 && bmi<=24.9) {
			System.out.println("YOu have a normal weight");
		}
		else if(bmi>=25 && bmi <=29.9) {
			System.out.println("You are overweight");
		}
		else {
			System.out.println("You are Obese");
		}
    }
}
    public class bmi {
    	public static void main(String[] args) {
    		 CheckBMI tracker = new CheckBMI();
    	        tracker.acceptRecord();
    	        tracker.calculateBMI();
    	        tracker.classifyBMI();
    	    }
    }
 
 

    
    
   
    

4. Discount Calculation for Retail Sales
Design a system to calculate the final price of an item after applying a discount. The system should:
1.	Accept the original price of an item and the discount percentage from the user.
2.	Calculate the discount amount and the final price using the following formulas:
o	Discount Amount Calculation: discountAmount = originalPrice * (discountRate / 100)
o	Final Price Calculation: finalPrice = originalPrice - discountAmount
3.	Display the discount amount and the final price of the item, in Indian Rupees (₹).
Define class DiscountCalculator with methods acceptRecord, calculateDiscount & printRecord and test the functionality in main method.

Solution:
package org.example5;

import java.util.Scanner;

class DiscountCal {
    private double originalPrice;
    private double discountRate;
    private double discountAmount;
    private double finalPrice;

    public void acceptRecord() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Original Price: ");
        this.originalPrice = sc.nextDouble();

        System.out.print("Enter Discount Rate (in %): ");
        this.discountRate = sc.nextDouble();
    }

    public void calculateDiscount() {
        this.discountAmount = originalPrice * (discountRate / 100);
        this.finalPrice = originalPrice - discountAmount;
    }

    public void printRecord() {

        System.out.println("Original Price: " +this.originalPrice);
        System.out.println("Discount Amount: " + discountAmount);
        System.out.println("Final Price: " + finalPrice);
    }
}
    

public class Sales {
public static void main(String[] args) {
      DiscountCal cl = new DiscountCal();
      cl.acceptRecord();
      cl.calculateDiscount();
      cl.printRecord();
}
}
 





5. Toll Booth Revenue Management
Develop a system to simulate a toll booth for collecting revenue. The system should:
1.	Allow the user to set toll rates for different vehicle types: Car, Truck, and Motorcycle.
2.	Accept the number of vehicles of each type passing through the toll booth.
3.	Calculate the total revenue based on the toll rates and number of vehicles.
4.	Display the total number of vehicles and the total revenue collected, in Indian Rupees (₹).
•	Toll Rate Examples:
o	Car: ₹50.00
o	Truck: ₹100.00
o	Motorcycle: ₹30.00
Define class TollBoothRevenueManager with methods acceptRecord, setTollRates, calculateRevenue & printRecord and test the functionality in main method.


